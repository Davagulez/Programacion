*{
    margin: 0;
    box-sizing: border-box;
}

body{
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

.container{
    width: 90%;
    height: 600px;
    margin: 40px auto;
    display: grid;

    /* funcion dinamica para la cuadrilla. Con la funcion minmax ahcemos que cada columna mida minimo 250px y cuando haya espacio para colocar dos columnas de ese tamaño, pasen a dividirse proporcionadamente el tamaño */
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    grid-auto-rows: 250px;

    /* grid-template-columns y template-rows sirven para definir el espacio dentro del grid */
    /* fr es una funcion que toma todo el espacio disponible y lo divide en cada una de las partes establecidas en la funcion repeat() */
    /* el gap en grid reemplaza el uso de margin en cada elemento */
    /* column-gap: 15px;;
    row-gap: 15px; */
    gap: 10px;

    /* organizar los elementos con grid Areas */
    /* grid-template-areas: 
    "nav nav nav nav nav"
    "main main main side side"
    "main main main side side"
    "main main main side side"
    "footer footer footer footer footer"; */

}

.item{
    color: #fff;
    font-size: 2em;
    display: flex;
    align-items: center;
    justify-content: center;

    background-size: cover;
    background-position: center;
}

.item1{
    background-image: url(imgs/img1.jpg);
    /* Cuando usamos grid-column y grid-row  nos permite recibir dos valores como coordenadas para especificar donde empieza y termina el grid-item. Estos numeros se separan por diagonal*/
    /* grid-column: 1/4;
    grid-row: 1/3; */

    /* grid-area: nav; */
}
.item2{
    background-image: url(imgs/img2.jpg);
   /*  grid-column: 4/6;
    grid-row: 1/5; */

    /* grid-area: side; */
}
.item3{
    background-image: url(imgs/img3.jpg);
    /* grid-column: 1/-1; */
    /* poner -1 es lo mismo qeu poner 6, haciendo referencia a la ultima linea de la cuadricula */
    /* grid-row: 5/6; */

    /* grid-area: footer; */
}
.item4{
    background-image: url(imgs/img4.jpg);
    /* grid-column: 1/3;
    grid-row: 3/5; */

    /* grid-area: main; */
}
.item5{
    background-image: url(imgs/img5.jpg);
    /* grid-row: 3/5; */
}
.item6{
    background-image: url(imgs/img6.jpg);
    /* grid-row: 3/5; */
}

@media(min-width:800px){
    .container{

        grid-template-columns:repeat(5,1fr);
        grid-template-rows:repeat(5,1fr);
        gap: 10px;
    
        /* organizar los elementos con grid Areas */
        grid-template-areas: 
        "main main main side side"
        "main main main side side"
        "main main main side side"
        "nav nav nav nav nav"
        "footer footer footer footer .";

        /* puedo modificar de cualquier forma el grid area, siempre y cuando se respete que sean cuadrados o rectangulos. Si hay una columna que quiero dejar vacia se reemplaza por un punto " . " */
    
    }
}

/* TEORIA DE CSS GRID */
/* CSS Grid Layout (Sistema de Cuadriculas) es el sistema mas poderoso de diseño disponible en CSS. Esto es gracia a su sistema bidimensional, lo que significa que se puede manejar tanto columnas como filas */

/* Se le llama Grid o cuadricula porque se utilizan filas y columnas. Estas filas y columnas crean una cuadricula, donde cada fila y columna esta formada por dos lineas (Grid-lines) */

/* Para entender Grid, hay que verlo como una cuadricula, compuesta de muchas celdas. Al principio los grid-items ocuparan una celda por cada grid-item */

/* un Grid Area es un espacio entre cuatro grid lines. Puede estar formado pro el numero que sea de celdas, pero un grid area SIEMPRE debe ser rectangular o cuadrado */