*{
    margin: 0;
    box-sizing: border-box;
}

body{
    font-family: Arial, Helvetica, sans-serif;
}

.grid{
    display: grid ;
    /*grid y inline-grid funcionan de la misma manera, nada mas que inline-grid hace que los el grid-container funcione como un elemento en linea*/


    /* Comportamiento por defecto*/

    /* Direccion de toda la cuadricula*/
    /* grid-auto-flow: row;     */

    /* alineacion vertical*/
    /*  align-items: stretch;    */

    /* alineacion horizontal*/
    /* justify-items: stretch; */ 

    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(4,1fr);

    /* Grid auto */
    /* grid-auto-flow: dense; */

    /*     grid-auto-rows: 1fr;
            grid-auto-columns: 1fr;
    */

    /*GAP*/
    /* Cuando se crean filas y columnas con fr, los grid-items adquieren el espacio despúes de definirse los gap*/
    /* row-gap: 3em;
    column-gap: 10px; */
    /* gap: 10px 10px; */ 

    

    /* Diferencias entre fr y auto: dan el mismo espacio, nada mas que auto, le da el tamaño minimo según el contenido a cada celda, y fr da un tamaño equitativo sin importar el contenido*/ 

    /* Las lineas arrancan a contarse desde el 1, y van de menor a mayor. Siempre va a haber 1 linea más por cada fila y columna. Es decir, si hay 6 filas, hay 7 grid-lines-rows y si hay 5 columnas, hay 6 grid-lines-columns*/

    width: 90%;
    max-width: 600px;
    margin: 80px auto;
    overflow: hidden;
    outline: 3px solid;
    height: 500px;
}

.item{
    /* cuando un conteiner pasa a tener un display grid, los items dentro de ese container se transforman en grid-items y adquieren las mismas propiedades. */
    color: #fff;
    font-size: 2.5rem;
}

.item-1{
    background-color: blue;
    
    /* una forma para posicionamiento: */
    /* grid-column-start: 3;
    grid-column-end: 5;
    grid-row-start: 2;
    grid-row-end: 5; */
    
    /* Shorthand:*/
    /* grid- column o row: grid-start / grid-end */
    /* grid-column: 3/5;
    grid-row: 1/4; */

    /* span y tracks*/
    /* con la propiedad span abarcamos directamente una celda dentro de nuestra cuadricula y podemos agregarle un valor que nos indique la cantidad de cuadriculas a ocupar vertical y horizontalmente*/
    /* grid-column: span 2 / -2;
    grid-row: span 2 / -1; */

    /* grid-area: row-start/ column-start / row-end / column-end*/
  /*   grid-area: 2 / 1 / 4 / 5; */
  grid-column: 3;
    
}

.item-2{
    background-color: blueviolet;
    /* grid-row: 4/5;
    grid-column: 1/5; */
}
.item-3{
    background-color: crimson;
    /* grid-row: 2/3;
    grid-column: 1/3; */
}
.item-4{
    background-color: black;
   /*  grid-row: 3/4;
    grid-column: 1/3; */
}
.item-5{background-color: brown;}
.item-6{background-color: yellowgreen;}